# 📚 makemore Part 5: Building a WaveNet 笔记

## 🎯 目标

从MLP升级到WaveNet架构，利用分层卷积网络建模长距离字符依赖，提升名字生成质量。

- **Part 4回顾** 🔍: 手动实现反向传播，深入理解MLP的优化。
- **Part 5重点** 🌟: 引入WaveNet（分层扩张卷积网络），捕捉更长上下文，生成更逼真的名字。

---

## 🧠 WaveNet 代码结构与流程

### 1️⃣ WaveNet架构概述

- **灵感**: Google DeepMind的WaveNet（用于语音生成），适配到字符级语言建模。

- **核心**:

  - 使用扩张卷积（dilated convolution），逐层捕捉更长上下文。
  - 分层结构，逐步融合多尺度信息。

- **对比MLP**:

  - MLP：固定上下文窗口，参数随窗口大小线性增长。
  - WaveNet：通过卷积共享参数，高效建模长依赖。

- **形象化**:

  ```
  输入字符 → 扩张卷积层1 → 层2 → ... → 输出概率
  ```

- **图标**: 🌊 WaveNet像“捕捉字符序列的波浪”。

### 2️⃣ 数据与嵌入

- **输入**: 上下文字符序列（batch_size × block_size）。

- **嵌入层**:

  - 与MLP类似，将字符映射到嵌入向量（`C[inputs]`）。
  - 形状：`(batch_size, block_size, n_embd)`。

- **代码**:

  - 初始化嵌入表`C`（27字符 × n_embd，如30维）。

- **图标**: 📍 嵌入像“字符的语义坐标”。

### 3️⃣ 扩张卷积层

- **作用**: 每层通过扩张卷积提取上下文特征，扩张因子（dilation）逐层增大（如1, 2, 4）。

- **代码**:

  - 卷积层：`nn.Conv1d`（输入通道=n_embd，输出通道=隐藏维度）。
  - 激活：`tanh`或其他非线性函数。
  - 堆叠多层，扩张因子倍增，覆盖更长上下文。

- **形象化**:

  ```
  层1 (dilation=1): 看2个字符
  层2 (dilation=2): 看4个字符
  层3 (dilation=4): 看8个字符
  ```

- **图标**: 🔍 卷积像“多尺度上下文扫描器”。

### 4️⃣ 输出与损失

- **输出层**:

  - 卷积特征 → 线性层 → logits（27维，词汇表大小）。
  - Softmax转换为下一字符概率。

- **损失**: 交叉熵损失（`F.cross_entropy`）。

- **代码**:

  - 最后一层：`nn.Linear`或`nn.Conv1d`映射到词汇表。

- **图标**: 🎰 输出像“概率预测器”。

### 5️⃣ 训练循环

- **流程**:

  1. 前向传播：嵌入 → 扩张卷积层 → 输出 → 损失。
  2. 反向传播：用PyTorch自动求导（Part 4的手动经验加深理解）。
  3. 优化：Adam优化器，调整学习率（如0.001）。

- **超参数**:

  - 扩张因子序列（如\[1, 2, 4, 8\]）。
  - 层数、隐藏维度、嵌入维度。

- **图标**: 🚀 训练像“模型的深度挖掘”。

### 6️⃣ 采样生成

- **代码**:

  - 从初始上下文开始，逐字符预测并采样。
  - WaveNet的长上下文建模生成更连贯的名字。

- **形象化**:

  ```
  上下文: ... → 预测 p → 采样 r → 新上下文 ..p → 预测 e
  输出: preston
  ```

- **图标**: 🎨 采样像“模型的序列创作”。

---

## 🔑 核心概念

- **扩张卷积** 🌐: 通过增大扩张因子，高效捕捉长距离依赖，参数共享减少计算量。
- **分层建模** 🏛️: 每层聚焦不同尺度的上下文，逐步融合信息。
- **参数效率** ⚙️: WaveNet比MLP更适合长上下文，参数随层数而非窗口大小增长。
- **长依赖** 🔗: WaveNet能建 “‘isab’ → ‘ella’” 的复杂模式。

---

## 🛠️ 实用技巧

- **扩张因子** 📏: 按2的幂次递增（如1, 2, 4），覆盖足够上下文。
- **层数与维度** 🛠️: 平衡模型容量和计算成本（如4-6层，隐藏维度128）。
- **学习率** ⚡: 初始较小（如0.001），观察损失曲线调整。
- **生成质量** 🔍: 检查生成名字的连贯性，评估长依赖建模效果。

---

## 📚 资源

- **视频**: Building makemore Part 5: Building a WaveNet
- **代码**: nn-zero-to-hero GitHub
- **论文**: Oord et al. (2016)《WaveNet: A Generative Model for Raw Audio》
- **Colab**: 视频描述中的Jupyter笔记本

---

## 🌟 总结

Part 5用WaveNet替换MLP，通过扩张卷积建模长距离字符依赖，生成更逼真的名字。代码结构从嵌入到多层卷积再到输出，清晰高效，展现了深度学习模型的模块化设计。